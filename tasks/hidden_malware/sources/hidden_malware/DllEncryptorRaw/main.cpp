#include <iostream>
#include <vector>
#include <iterator>
#include <Windows.h>

#include "RC4.h"
#include "Writer.h"

std::vector <BYTE> key = { 0xa2, 0x6d, 0xbf, 0x46, 0x2d, 0x68, 0x86, 0x89, 0x44, 0xcb, 0x1e, 0x8f, 0x3, 0x46, 0x36, 0xcc, 0xf3, 0x16, 0x67, 0x4d, 0xf3, 0xb5, 0xfa, 0x98, 0xe6, 0xd7, 0x96, 0xb3, 0x7d, 0x27, 0xd4, 0xfc, 0x6c, 0x59, 0x4c, 0x4f, 0x7, 0x34, 0xf4, 0x4e, 0xd3, 0x57, 0xbe, 0x69, 0xad, 0x3, 0x33, 0x18, 0x87, 0x3d, 0x2c, 0xf5, 0x42, 0x52, 0xfc, 0x91, 0x1d, 0x1c, 0xa0, 0x6c, 0xe4, 0xc8, 0x6f, 0x13, 0x78, 0xf0, 0x47, 0xee, 0xb5, 0xef, 0x26, 0xeb, 0xd6, 0x41, 0x47, 0x38, 0xa8, 0x89, 0xba, 0x6c, 0x2d, 0xee, 0x44, 0xb4, 0xe9, 0xd2, 0x4f, 0x29, 0xf2, 0xa7, 0xcd, 0xa5, 0xdf, 0xdd, 0xae, 0xab, 0xd5, 0xeb, 0x3a, 0x8e, 0x94, 0x37, 0x73, 0xbb, 0xa, 0xdf, 0x8d, 0x50, 0xd1, 0x7b, 0x34, 0xfe, 0x53, 0x80, 0x3, 0x5, 0x94, 0x4a, 0x6c, 0xa8, 0x94, 0xea, 0xd8, 0x6f, 0xdf, 0xcf, 0x52, 0xc9, 0xdf, 0xb7, 0xd6, 0x43, 0xe9, 0x16, 0x25, 0x1, 0xbf, 0xbe, 0xc1, 0x4a, 0xa4, 0xef, 0x49, 0x3f, 0x34, 0x4e, 0xd5, 0x41, 0xc7, 0xe5, 0xd5, 0x2a, 0x58, 0x96, 0xfb, 0xcc, 0x5b, 0xd1, 0x16, 0xb5, 0x2a, 0x79, 0xe6, 0xd5, 0x92, 0xe9, 0x13, 0xa2, 0xdb, 0x67, 0xd9, 0x25, 0xe2, 0x80, 0x82, 0xbd, 0x4a, 0x28, 0x5e, 0xd8, 0xa9, 0xc7, 0x28, 0x94, 0x3f, 0xdd, 0xa1, 0xb5, 0xcb, 0x48, 0x3f, 0x29, 0x8a, 0xdd, 0x2c, 0x3e, 0x2c, 0xae, 0xe8, 0x31, 0x86, 0x76, 0x14, 0xe9, 0x6e, 0x53, 0x2f, 0x3b, 0xb1, 0x64, 0x24, 0xf1, 0x52, 0x5b, 0xe, 0x39, 0x66, 0xc9, 0xbe, 0x7e, 0x35, 0xc, 0xf8, 0xae, 0x96, 0x2a, 0x50, 0x86, 0xbf, 0xde, 0x8b, 0xf9, 0xea, 0x6f, 0x3a, 0x1f, 0xb7, 0xd5, 0x24, 0x15, 0x8b, 0xe0, 0x42, 0x95, 0x89, 0x9e, 0xa2, 0x3, 0x5f, 0xaf, 0x5f, 0x86, 0x65, 0xc9, 0xdb, 0x86 };

std::vector <BYTE> read_file(std::string path)
{
	std::ifstream file(path, std::ios::binary);

	// Stop eating new lines in binary mode!!!
	file.unsetf(std::ios::skipws);

	// get its size:
	std::streampos fileSize;

	file.seekg(0, std::ios::end);
	fileSize = file.tellg();
	file.seekg(0, std::ios::beg);

	// reserve capacity
	std::vector <BYTE> out;
	out.reserve(fileSize);

	// read the data:
	out.insert(out.begin(),
		std::istream_iterator<BYTE>(file),
		std::istream_iterator<BYTE>());

	return out;
}

int main(int argc, const char *argv[])
{
	if (argc < 3)
	{
		std::cout << "usage: ./encryptor dllin.dll dllout.dll\n";
		return 0;
	}

	std::vector <BYTE> plain = read_file(argv[1]);
	std::vector <BYTE> encrypted(plain.size());

	RC4::Encrypt(&key, &plain, &encrypted);

	Writer::write(argv[2], { &encrypted });
	
	return 0;
}