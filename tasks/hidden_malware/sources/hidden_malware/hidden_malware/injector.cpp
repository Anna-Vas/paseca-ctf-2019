#include "injector.h"

int Injector::inject_dll(std::wstring psName, std::string libPath)
{
	TCHAR fullLibPath[MAX_PATH];
	SIZE_T fullLibPathSize = 0;
	std::vector <DWORD> pids;

	// Get Full path
	fullLibPathSize = GetFullPathNameA(libPath.c_str(), MAX_PATH, fullLibPath, NULL);
	if (fullLibPathSize == 0)
	{
		return 1;
	}

	// get process pid
	pids = get_pid_by_name(psName);
	if (pids.size() == 0) {
		return 1;
	}

	HANDLE psHandle = OpenProcess(PROCESS_ALL_ACCESS, false, pids[0]);
	if (psHandle != nullptr)
	{
		// Allocate memory for dll path in remote process
		LPVOID psMemoryLibPath = VirtualAllocEx(psHandle, NULL, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		if (psMemoryLibPath != nullptr)
		{
			// Write DLL path to newly allocated memory
			WriteProcessMemory(psHandle, psMemoryLibPath, fullLibPath, MAX_PATH, &fullLibPathSize);

			// Get address of LoadLibraryA
			FARPROC loadLibraryA = GetProcAddress(GetModuleHandle("kernel32"), "LoadLibraryA");

			// Call LoadLibraryA in remote process to load DLL
			CreateRemoteThread(psHandle, NULL, NULL, (LPTHREAD_START_ROUTINE)loadLibraryA, psMemoryLibPath, NULL, NULL);
		}
		else {
			return 1;
		}
	}
	else {
		return 1;
	}

	return 0;
}



