#include "RC4.h"

int RC4::KSA(std::vector<BYTE>* key, std::vector<BYTE>* S) {

	size_t len = key->size();
	int j = 0;

	for (size_t i = 0; i < N; i++)
		S->at(i) = i;

	for (size_t i = 0; i < N; i++) {
		j = (j + S->at(i) + key->at(i % len)) % N;
		std::swap(S->at(i), S->at(j));
	}

	return 0;
}

int RC4::PRGA(std::vector<BYTE>* S, std::vector<BYTE>* plaintext, std::vector<BYTE>* ciphertext) {

	int i = 0;
	int j = 0;

	for (size_t n = 0, len = plaintext->size(); n < len; n++) {
		i = (i + 1) % N;
		j = (j + S->at(i)) % N;

		std::swap(S->at(i), S->at(j));
		int rnd = S->at((S->at(i) + S->at(j)) % N);

		ciphertext->at(n) = rnd ^ plaintext->at(n);
	}

	return 0;
}

int RC4::Encrypt(std::vector<BYTE>* key, std::vector<BYTE>* plaintext, std::vector<BYTE>* ciphertext) {

	std::vector <BYTE> S(N);
	KSA(key, &S);

	PRGA(&S, plaintext, ciphertext);

	return 0;
}

int RC4::Decrypt(std::vector<BYTE>* key, std::vector<BYTE>* plaintext, std::vector<BYTE>* ciphertext) {

	std::vector <BYTE> S(N);
	KSA(key, &S);

	PRGA(&S, ciphertext, plaintext);

	return 0;
}