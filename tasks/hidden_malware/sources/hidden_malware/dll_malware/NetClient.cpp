#include "NetClient.h"

NetClient::NetClient()
	: socket(io_service)
{
}

NetClient::~NetClient()
{
}

void NetClient::connect(std::string ip, int port)
{
	this->ip   = ip;
	this->port = port;

	this->socket.connect(tcp::endpoint(boost::asio::ip::address::from_string(ip), port));
}

std::string NetClient::recv_command()
{
	boost::system::error_code error;
	boost::asio::streambuf receive_buffer;
	boost::asio::read(this->socket, receive_buffer, boost::asio::transfer_at_least(2), error);
	if (error && error != boost::asio::error::eof)
	{
		return std::string();
	}
	else {
		this->last_cmd = std::string(boost::asio::buffer_cast<const char*>(receive_buffer.data()));
		return JsonParser::extract_json<std::string>(this->last_cmd, "cmd");
	}
}

int NetClient::send(std::string data)
{
	boost::system::error_code error;
	boost::asio::write(this->socket, boost::asio::buffer(data), error);
	
	if (!error)
	{
		return 0;
	}
	else {
		return 1;
	}
}

std::string NetClient::recv()
{
	boost::system::error_code error;
	boost::asio::streambuf receive_buffer;
	boost::asio::read(this->socket, receive_buffer, boost::asio::transfer_at_least(2), error);
	if (error && error != boost::asio::error::eof)
	{
		return std::string();
	}
	else {
		return std::string(boost::asio::buffer_cast<const char *>(receive_buffer.data()));
	}
}

std::string NetClient::generate_uuid()
{
	boost::uuids::uuid uuid = boost::uuids::random_generator()();
	this->uuid = boost::lexical_cast<std::string>(uuid);
	return this->uuid;
}
