// offset of this struct pushed onto stack. JMPREL(.rel.plt) + idx * sizeof(Elf64_Rela), where idx pushed onto stack
struct Elf64_Rela // struct_size: 24 bytes or 16 in case of Elf64_Rel 
{
  unsigned __int64 r_offset; // 8 bytes  // Address
  unsigned __int64 r_info;   // 8 bytes  // Relocation type and symbol idx
  __int64 r_addend;          // 8 bytes  // must be 0x0
};

#define ELF64_R_SYM(i)    ((i)>>32)         // gives the index of the Elf64_Sym in SYMTAB
#define ELF64_R_TYPE(i)   ((i)&0xffffffffL) // must be r_x86_64_jump_slot (0x7)
#define ELF64_R_INFO(s,t) (((s)<<32)+((t)&0xffffffffL))   

// ptr to this struct: SYMTAB + idx * sizeof(Elf64_Sym), where idx = ELF64_R_SYM(r_info)
struct __attribute__((aligned(8))) Elf64_Sym // struct_size: 24 bytes
{
  unsigned __int32 st_name;  // 4 bytes  // Symbol name (string tbl index)     // STRTAB + st_name == function_name
  unsigned __int8  st_info;  // 1 byte   // Symbol type and binding            // 
  unsigned __int8  st_other; // 1 byte   // Symbol visibility under glibc>=2.2 //
  unsigned __int16 st_shndx; // 2 bytes  // Section index                      //
  unsigned __int64 st_value; // 8 bytes  // Symbol value                       // 
  unsigned __int64 st_size;  // 8 bytes  // Symbol size                        // 
};


typedef struct Elf32_Rel // size: 8 bytes
{
   Elf32_Addr r_offset ; // 4 bytes  /* Address */ 
   Elf32_Word r_info ;   // 4 bytes  /* Relocation type and symbol index */ 
} Elf32_Rel; 

#define ELF32_R_SYM(val) ((val) >> 8) 
#define ELF32_R_TYPE(val) ((val) & 0xff)

typedef struct // size: 16 bytes
{
  Elf32_Word    st_name;  // 4 bytes  /* Symbol name (string tbl index) */
  Elf32_Addr    st_value; // 4 bytes  /* Symbol value */
  Elf32_Word    st_size;  // 4 bytes  /* Symbol size */
  unsigned char st_info;  // 1 byte   /* Symbol type and binding */
  unsigned char st_other; // 1 byte   /* Symbol visibility under glibc>=2.2 */
  Elf32_Section st_shndx; // 2 bytes  /* Section index */
} Elf32_Sym;



// push Elf64_Rela offset onto stack, then call runtime linker