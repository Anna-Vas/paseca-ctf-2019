import socket
from sys import argv
from binascii import unhexlify
from time import sleep
def compositeGCD(a, b):
    if(b == 0):
        return a.monic()
    else:
        return compositeGCD(b, a % b)

def FRA(c1, c2, e, n, dif):
    PRx.<xn> = PolynomialRing(Zmod(n))
    x = PRx.gen()
    g1 = x^e - c1
    g2 = (x + dif)^e - c2
    m = Integer(n-(compositeGCD(g1,g2)).coefficients()[0]) 
    return m

ip = argv[1]
port = int(argv[2])

sock = socket.socket()
sock.connect((ip, port))
sleep(1)

data = sock.recv(5096).decode('ascii')

e, n, enc_flag = eval(data.split('\n')[1].split('  ')[1])[0],eval(data.split('\n')[1].split('  ')[1])[1], int(data.split('\n')[2].split('  ')[1])

m1, m2 = b'123\n', b'124\n'
sock.send(b'E\n')

sock.recv(100)

sock.send(m1)
data = sock.recv(1024).decode('ascii')
c1 = int(data.split('\n')[0].split(' ')[1])

sock.send(b'E\n')
sock.recv(100)
sock.send(m2)
data = sock.recv(1024).decode('ascii')
c2 = int(data.split('\n')[0].split(' ')[1])


unpadded_m = FRA(c1, c2, e, n, 1)
p = unpadded_m >> 7
q = n // p
d = inverse_mod(e, (p-1) * (q-1))
print(hex(int(pow(enc_flag,d, n)))[2:])
